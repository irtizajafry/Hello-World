#ifndef STACK_H
#define STACK_H
#include "Fraction.h"
#include "Operation.h"
#include"Stack.h"

Stack::Stack()
{
	list=new Operation[1];
	size=0;
}

Stack::Stack(Operation *O, int Size)
{
	size++;
	Operation *list=new Operation[Size];
	for(int i=0;i<Size;i++)
	{
		O[i]=list[i];
	}
}

Stack::~Stack()
{
	delete [] list;
}

void Stack::Push(Operation &op1)
{	
	Operation *LIST=new Operation[size+1];
	for(int i=0;i<size;i++)
	{
		LIST[i]=list[i];
	}
	LIST[size]=op1; 
	delete [] list;
	list=LIST;
	size++;
	//count
}

void Stack::Pop()
{
    if(size==0)
    {
    	cout<<"No elements in stack"<<endl;
    	return;
	}
	cout<<list[size-1];
	decrease();
    size--;
}

void Stack::decrease()
{
	Operation *LIST=new Operation[size-1];
	for(int i=0;i<size-1;i++)
	{
		LIST[i]=list[i];
	}	
	delete [] list;
	list=LIST;
}

void Stack::Print()
{
	if(size==0)
	{
		cout<<"No elements in stack"<<endl;
		return;
	}
	for(int i=size-1;i>=0;i--)
	{
		cout<<list[i]<<endl;
	}
}
#endif
